Before beginning, checkout the COMP232HW project from inside of your folder in the COMP232S17 on Git. Be sure to check out the COMP232HW folder, not any of its parent folders. Please submit your solutions via git.  You will need to add a text file to your git homework repository.

1. Confirm that you have properly checked out the COMP232HW project by running the RunMe class (Click the Run Icon in the Eclipse toolbar, or right click on the class name in the "Package Explorer", point at "Run as" and choose "Java Application"). What output is generated in the "Console Tab"? Answer this question on Moodle.
If you cannot run the RunMe class check that you have checked out only the COMP232HW folder and not one of its parents.
2. Open the CountXWithDubs class and complete the countXWithDubs method. Your solution must be recursive. For each of the programming questions, the class you are provided will contain a collection of JUnit test methods. You can test your solution by running the class as a JUnit test (Right click on the class name in the "Package Explorer", point at "Run as" and choose "JUnit Test).
3. Open the NestedParentheses class and complete the validNesting method. Your solution must be recursive. Be sure to test your solution by running the class as a JUnit Test.
If you would like further practice with problems like #2 & #3 use the CodingBat Basic Recursion Exercises link on the course web page for this topic. You can code and submit solutions to problems and it will tell you if your solution is correct. Some of the problems, those marked with 'H' include hints and solutions as well.
4. In class we drew the left part of the recursive call tree for the subset method when invoked on "ABC". Draw, very neatly, the right part of the recursive subset tree when invoked on "ABC". Use the same notation that we used in class. Answer this question on Moodle. 
5. Open the Combinations class and complete the private combinations method. Hint: Develop a solution by modifying the subset method we studied in class. Be sure to test your solution by running the class as a JUnit Test. Once you get it working try to modify the code further to reduce the number of recursive calls made during a run. You can edit the main method and run Combinations as a Java Application to see the number of calls made.
6. Run the SplitArrayPrintSolution class as a Java Application. What output is generated? Why? Answer this question on Moodle.
7. Open the SplitArrayPrintSolution class. The private the splitArray method in this class is nearly identical to the one we studied in class. The only change is that it has had 2 parameters (gp1List and gp2List) added to its signature. These parameters provide a means for the private splitArray method to keep track of the actual values in each group. The values added to these lists are then printed by the public splitArray method when a solution is found. Currently the private splitArray method does not add any values to these lists. Modify the private splitArray method such that the solution is printed correctly. Hint: It is only necessary to add 4 lines of code to the private splitArray method.
8. Open the SplitOdd10 class and complete the splitOdd10 method. Your solution must use recursive backtracking. Be sure to test your solution by running the class as a JUnit Test.
If you would like more practice with recursive backtracking problems like those in questions #7 and #8 use the CodingBat Recursive Backtracking Exercises link on the course web page for this topic. Turn in your solutions to the programming exercises by committing your changes to the COMP232 project to Git. 